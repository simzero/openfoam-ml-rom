/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


#include "$FOAM_CASE/inputs"

scale   0.001;

w 0.5;

boxHeightHalf #calc "$boxHeight*0.5";
boxHeightHalfNeg #calc "-$boxHeightHalf";
boxLengthHalf #calc "$boxLength*0.75";
boxLengthHalfNeg #calc "-$boxLength*0.5";
wNeg #calc "-$w";

vertices
(
    ($boxLengthHalfNeg $wNeg $boxHeightHalfNeg)
    ($boxLengthHalf $wNeg $boxHeightHalfNeg)
    ($boxLengthHalf $w $boxHeightHalfNeg)
    ($boxLengthHalfNeg $w $boxHeightHalfNeg)
    ($boxLengthHalfNeg $wNeg $boxHeightHalf)
    ($boxLengthHalf $wNeg $boxHeightHalf)
    ($boxLengthHalf $w $boxHeightHalf)
    ($boxLengthHalfNeg $w $boxHeightHalf)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) ($nCellsX 1 $nCellsZ) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    /*default
    {
        type patch;
        faces
        (
            (3 7 6 2)
            (1 5 4 0)
            (0 4 7 3)
        );
    }*/

    frontAndBack
    {
        type empty;
        faces
        (
            (3 7 6 2)
            (1 5 4 0)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (2 6 5 1)
        );
    }
    lowerWall
    {
        type wall;
        faces
        (
            (0 3 2 1)
        );
    }
    upperWall
    {
        type wall;
        faces
        (
            (4 5 6 7)
        );
    }
    obstacle
    {
        type wall;
        faces
        (
        );
    }
);

// ************************************************************************* //
